name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  # ========= Ubuntu (Hauptjob): baut, lintet, validiert, pusht oder erstellt PR =========
  ci-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install tools (apt + pip)
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y shellcheck zip
          python -m pip install --upgrade pip
          pip install pyyaml jsonschema

      - name: Run bootstrap (if present)
        run: |
          set -euo pipefail
          if [ -x scripts/bootstrap_eculibre.sh ]; then
            scripts/bootstrap_eculibre.sh
          else
            echo "bootstrap script not found -> skip"
          fi

      - name: Shell lint (only real shell scripts)
        run: |
          set -euo pipefail
          if [ -d scripts ]; then
            mapfile -t SH_FILES < <(grep -rlI -m1 -E '^#!.*\b(bash|sh|dash|ksh)\b' scripts || true)
            if [ "${#SH_FILES[@]}" -gt 0 ]; then
              shellcheck "${SH_FILES[@]}"
            else
              echo "no shell scripts found"
            fi
          else
            echo "no scripts/ dir -> skip shellcheck"
          fi

      - name: Schema validate (if files present)
        run: |
          set -euo pipefail
          if [ -f schemas/metadata.schema.yaml ] && [ -f scripts/validate_metadata.py ]; then
            python scripts/validate_metadata.py
          else
            echo "schema or validator missing -> skip"
          fi

      - name: Repo check (if present)
        run: |
          set -euo pipefail
          if [ -x scripts/check_repo.sh ]; then
            scripts/check_repo.sh
          else
            echo "check_repo.sh not found -> skip"
          fi

      - name: Pack snapshot
        run: |
          set -euo pipefail
          mkdir -p out
          zip -qr out/structure-snapshot-linux.zip rawdata patches schemas docs || true
          echo "CI done" > out/ci-linux.log

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts-linux
          path: out

      - name: Prepare Git identity (for push on same repo)
        if: github.event_name == 'push' && github.repository_owner == github.actor
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - id: commit
        name: Commit and push generated changes (try)
        if: github.event_name == 'push' && github.repository_owner == github.actor
        continue-on-error: true
        run: |
          set -euo pipefail
          echo "pushed=false" >> "$GITHUB_OUTPUT"
          git checkout "${GITHUB_REF_NAME}"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            echo "pushed=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          git commit -m "ci: update generated files [skip ci]"
          if git pull --rebase origin "${GITHUB_REF_NAME}"; then
            if git push origin "HEAD:${GITHUB_REF_NAME}"; then
              echo "pushed=true" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Create PR with changes (fallback)
        if: |
          github.event_name != 'pull_request' &&
          (steps.commit.conclusion == 'failure' || steps.commit.conclusion == 'skipped' || steps.commit.outputs.pushed != 'true')
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "ci: update generated files"
          title: "CI: Update generated files"
          body: "Automated update from CI."
          branch: "ci/update-generated-${{ github.run_id }}"
          base: ${{ github.ref_name || 'main' }}

  # ========= openSUSE Job (Container) =========
  ci-suse:
    runs-on: ubuntu-latest
    container: opensuse/leap:15.5
    steps:
      - name: Install git (container)
        run: |
          zypper -n ref
          zypper -n in git
      - name: Checkout (inside container)
        uses: actions/checkout@v4
      - name: Install tools (zypper + pip)
        run: |
          set -euo pipefail
          zypper -n in -y ShellCheck python3-pip zip || true
          python3 -m pip install --upgrade pip || true
          pip3 install pyyaml jsonschema || true
      - name: Run bootstrap + validate (best-effort)
        run: |
          set -euo pipefail
          [ -x scripts/bootstrap_eculibre.sh ] && scripts/bootstrap_eculibre.sh || true
          if command -v shellcheck >/dev/null 2>&1; then
            mapfile -t SH_FILES < <(grep -rlI -m1 -E '^#!.*\b(bash|sh|dash|ksh)\b' scripts || true)
            [ "${#SH_FILES[@]}" -gt 0 ] && shellcheck "${SH_FILES[@]}" || true
          fi
          [ -f schemas/metadata.schema.yaml ] && [ -f scripts/validate_metadata.py ] && python3 scripts/validate_metadata.py || true
          [ -x scripts/check_repo.sh ] && scripts/check_repo.sh || true
      - name: Pack snapshot (SUSE)
        run: |
          mkdir -p out
          zip -qr out/structure-snapshot-suse.zip rawdata patches schemas docs || true
          echo "CI suse done" > out/ci-suse.log
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts-suse
          path: out

  # ========= Arch Linux Job (Container) =========
  ci-arch:
    runs-on: ubuntu-latest
    container: archlinux:latest
    steps:
      - name: Install git (container)
        run: |
          pacman -Sy --noconfirm archlinux-keyring || true
          pacman -Syu --noconfirm
          pacman -S --noconfirm git
      - name: Checkout (inside container)
        uses: actions/checkout@v4
      - name: Install tools (pacman + pip)
        run: |
          set -euo pipefail
          pacman -S --noconfirm shellcheck python-pip zip || true
          pip install --upgrade pip || true
          pip install pyyaml jsonschema || true
      - name: Run bootstrap + validate (best-effort)
        run: |
          set -euo pipefail
          [ -x scripts/bootstrap_eculibre.sh ] && bash scripts/bootstrap_eculibre.sh || true
          if command -v shellcheck >/dev/null 2>&1; then
            mapfile -t SH_FILES < <(grep -rlI -m1 -E '^#!.*\b(bash|sh|dash|ksh)\b' scripts || true)
            [ "${#SH_FILES[@]}" -gt 0 ] && shellcheck "${SH_FILES[@]}" || true
          fi
          [ -f schemas/metadata.schema.yaml ] && [ -f scripts/validate_metadata.py ] && python scripts/validate_metadata.py || true
          [ -x scripts/check_repo.sh ] && bash scripts/check_repo.sh || true
      - name: Pack snapshot (Arch)
        run: |
          mkdir -p out
          zip -qr out/structure-snapshot-arch.zip rawdata patches schemas docs || true
          echo "CI arch done" > out/ci-arch.log
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts-arch
          path: out

  # ========= Windows Job (Runner) =========
  ci-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install tools (Chocolatey)
        shell: powershell
        run: |
          choco install -y shellcheck
          python -m pip install --upgrade pip
          pip install pyyaml jsonschema

      - name: Run bootstrap (bash)
        shell: bash
        run: |
          set -euo pipefail
          if [ -x scripts/bootstrap_eculibre.sh ]; then
            bash scripts/bootstrap_eculibre.sh
          else
            echo "bootstrap script not found -> skip"
          fi

      - name: Shell lint (bash; only real shell scripts)
        shell: bash
        run: |
          set -euo pipefail
          if command -v shellcheck >/dev/null 2>&1 && [ -d scripts ]; then
            mapfile -t SH_FILES < <(grep -rlI -m1 -E '^#!.*\b(bash|sh|dash|ksh)\b' scripts || true)
            [ "${#SH_FILES[@]}" -gt 0 ] && shellcheck "${SH_FILES[@]}" || true
          else
            echo "shellcheck or scripts/ not available -> skip"
          fi

      - name: Schema validate (python)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f schemas/metadata.schema.yaml ] && [ -f scripts/validate_metadata.py ]; then
            python scripts/validate_metadata.py
          else
            echo "schema or validator missing -> skip"
          fi

      - name: Repo check (bash)
        shell: bash
        run: |
          set -euo pipefail
          if [ -x scripts/check_repo.sh ]; then
            bash scripts/check_repo.sh
          else
            echo "check_repo.sh not found -> skip"
          fi

      - name: Pack snapshot (Windows)
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path out | Out-Null
          $paths = @("rawdata","patches","schemas","docs") | Where-Object { Test-Path $_ }
          if ($paths.Count -gt 0) {
            Compress-Archive -Path $paths -DestinationPath out\structure-snapshot-windows.zip -Force
          }
          "CI windows done" | Out-File -FilePath out\ci-windows.log -Encoding utf8

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts-windows
          path: out
