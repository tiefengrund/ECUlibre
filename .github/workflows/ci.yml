# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck zip
          python -m pip install --upgrade pip
          pip install pyyaml jsonschema

      - name: Bootstrap + Lint + Validate (log to out/ci.log)
        run: |
          set -Eeuo pipefail
          mkdir -p out
          {
            echo ">>> bootstrap"
            chmod +x scripts/bootstrap_eculibre.sh || true
            ./scripts/bootstrap_eculibre.sh

            echo ">>> shellcheck"
            find scripts -maxdepth 1 -type f -perm -111 -print0 2>/dev/null | xargs -0 -r shellcheck

            echo ">>> schema validate"
            python <<'PY'
import os, sys, yaml
from jsonschema import validate
with open("schemas/metadata.schema.yaml","r") as f:
    schema = yaml.safe_load(f)
failures = []
for root,_,files in os.walk("rawdata"):
    if "metadata.yml" in files:
        p = os.path.join(root,"metadata.yml")
        with open(p) as mf:
            data = yaml.safe_load(mf) or {}
        try:
            validate(instance=data, schema=schema)
        except Exception as e:
            failures.append(f"{p}: {e}")
if failures:
    print("\n".join(failures), file=sys.stderr)
    sys.exit(1)
print("schema OK")
PY

            echo ">>> repo check"
            chmod +x scripts/check_repo.sh
            ./scripts/check_repo.sh

            echo ">>> pack snapshot"
            zip -qr out/structure-snapshot.zip rawdata patches schemas docs || true
          } | tee out/ci.log

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: out

      - name: Prepare Git identity
        if: github.event_name == 'push' && github.repository_owner == github.actor
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Commit and push changes
        if: github.event_name == 'push' && github.repository_owner == github.actor
        run: |
          set -euo pipefail
          git checkout "${GITHUB_REF_NAME}"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "ci: update generated files [skip ci]"
          git pull --rebase origin "${GITHUB_REF_NAME}"
          git push origin "HEAD:${GITHUB_REF_NAME}"

      - name: Create PR with changes (fallback for forks/protected branches)
        if: (github.event_name == 'pull_request') || (github.repository_owner != github.actor)
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "ci: update generated files"
          title: "CI: Update generated files"
          body: "Automated update from CI."
          branch: "ci/update-generated-${{ github.run_id }}"
          base: ${{ github.ref_name }}
