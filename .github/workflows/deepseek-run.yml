name: DeepSeek Run
run-name: >
  DeepSeek • ${{ inputs.mode || 'prompt' }} • ${{ github.ref_name }}
  • ${{ github.run_id }}

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Use 'prompt' for inline text or 'file' to read from a repo file"
        type: choice
        required: true
        default: prompt
        options: [prompt, file]
      prompt:
        description: "Prompt text (used when mode=prompt)"
        type: string
        required: false
        default: "Hello from ECUlibre"
      prompt_path:
        description: "Path to prompt file in repo (used when mode=file)"
        type: string
        required: false
        default: "prompt.txt"
      model:
        description: "DeepSeek model (deepseek-chat or deepseek-reasoner)"
        type: string
        required: false
        default: "deepseek-chat"
      base_url:
        description: "API base URL"
        type: string
        required: false
        default: "https://api.deepseek.com"

jobs:
  call-deepseek:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      MODEL: ${{ inputs.model }}
      BASE_URL: ${{ inputs.base_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare prompt
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ inputs.mode }}" == "file" ]]; then
            [[ -f "${{ inputs.prompt_path }}" ]] || { echo "File not found: ${{ inputs.prompt_path }}"; exit 2; }
            # JSON-safe: escape content via python
            PROMPT=$(python3 - <<'PY' "${{ inputs.prompt_path }}"
import sys, json
print(json.dumps(open(sys.argv[1], 'r', encoding='utf-8').read()))
PY
)
          else
            # Inline prompt -> JSON-escape
            PROMPT=$(python3 - <<'PY' "${{ inputs.prompt }}"
import sys, json
print(json.dumps(sys.argv[1]))
PY
)
          fi
          echo "prompt_json=$PROMPT" >> "$GITHUB_OUTPUT"

      - name: Guard: API key present
        shell: bash
        run: |
          test -n "${{ secrets.DEEPSEEK_API_KEY }}" || { echo "Set GitHub secret DEEPSEEK_API_KEY"; exit 2; }

      - name: Call DeepSeek API
        id: call
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p out
          jq -n \
            --arg model "$MODEL" \
            --argjson prompt "${{ steps.prep.outputs.prompt_json }}" \
            '{
              model: $model,
              messages: [
                {role:"system", content:"You are a concise assistant."},
                {role:"user",   content:$prompt}
              ]
            }' > out/request.json

          curl -fsS "${BASE_URL}/chat/completions" \
            -H "Authorization: Bearer ${{ secrets.DEEPSEEK_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data @out/request.json \
            | tee out/response.json >/dev/null

          # Extrahiere reine Antwort (falls Struktur wie OpenAI-kompatibel)
          jq -r '
             .choices?[0]?.message?.content
             // .data?[0]?.text
             // .output_text
             // .response
             // .
          ' out/response.json > out/response.txt || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deepseek-output
          path: |
            out/request.json
            out/response.json
            out/response.txt
